#### nginx-globals - https://github.com/philcryer/nginx-globals

#### TEST your running SSL config against SSL Labs https://www.ssllabs.com/ssltest/analyze.html
#### GENERATE a config for your specific nginx/ssl versions at Mozilla
#### https://mozilla.github.io/server-side-tls/ssl-config-generator/ (h/t to TF for the link)

#### Certificate and ket paths
ssl_certificate             /etc/letsencrypt/live/dir_path_domain/fullchain.pem;
ssl_certificate_key         /etc/letsencrypt/live/dir_path_domain/privkey.pem;

#### Common 'best practices' SSL settings
#ssl                         on; # DEPRECATED
ssl_prefer_server_ciphers   off;
keepalive_timeout           70;
ssl_session_timeout         1d;
ssl_session_cache           shared:SSL:10m;
ssl_protocols               TLSv1.2 TLSv1.3;

#### Add HTTP Strict Transport Security (aka HSTS) header allows a site to enforce
#### SSL usage on the client side, letting the browser know that it will only use
#### HTTPS protocol - http://www.nginxtips.com/hsts-nginx/
#### HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
#### HSTS (includeSubdmains; preload;) from https://www.owasp.org/index.php/HTTP_Strict_Transport_Security
add_header                  Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

#### Enable OCSP Stapling - fetch OCSP records from URL in ssl_certificate and cache them
#### 2015 https://weakdh.org/sysadmin.html
ssl_stapling                on;
ssl_stapling_verify         on;

#### Diffie-Hellman for DHE ciphersuites, recommended 2048 bits
#### 2015 Guide to Deploying Diffie-Hellman for TLS https://weakdh.org/sysadmin.html
#### generate it with: openssl dhparam -out /etc/nginx/dhparams.pem 2048
#ssl_dhparam                 /etc/nginx/dhparams-4096.pem;

#### Disable support for SSLv2 and SSLv3 and enable support for TLS, explicitly
#### allow/disallow specific ciphers in the given order
#### 2015 https://weakdh.org/sysadmin.html
#ssl_ciphers                 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
#### 2016 https://cipherli.st/ - working with a paired down list compared to before. h/t KW for the hint
#ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";

#### verify chain of trust of OCSP response using Root CA and Intermediate certs
#### 2015 https://weakdh.org/sysadmin.html
#### to use; add your key path and DNS IP and uncomment
ssl_trusted_certificate    /etc/letsencrypt/live/dir_path_domain/chain.pem;
resolver           127.0.0.11 valid=60s ipv6=off;
resolver_timeout   10s;

#### New ideas from cipherlist
#### 2016 https://cipherli.st/
ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
ssl_session_tickets off; # Requires nginx >= 1.5.9